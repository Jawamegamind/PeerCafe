name: Backend Test Suite üêç
# Run on PRs to main and pushes to main (server-side post-commit)
on:
  workflow_dispatch:   # allows manual triggering
  pull_request:
    branches: ["main"]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-windows-conda.yml'
      - 'backend/requirements.yaml'
  push:
    branches: ["main"]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-windows-conda.yml'
      - 'backend/requirements.yaml'

permissions:
  contents: read

concurrency:
  group: backend-windows-conda-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-pytest-windows:
    name: Backend - pytest (Windows, Conda)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          activate-environment: backend
          environment-file: backend/requirements.yaml
          use-mamba: true

      - name: Confirm conda env
        shell: pwsh
        run: |
          conda info
          conda list

      - name: Run pytest with coverage
        shell: pwsh
        env:
          CI: true
          PROJECT_URL: ${{secrets.PROJECT_URL}}
          API_KEY: ${{secrets.API_KEY}}
        run: |
          # Create output folder
          New-Item -ItemType Directory -Force -Path ./backend/test-output | Out-Null
          # Run tests
          pytest backend --maxfail=1 --disable-warnings --junitxml=./backend/test-output/junit.xml --cov=backend --cov-report=xml:./backend/coverage.xml

      - name: Upload pytest artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: |
            backend/test-output/junit.xml
            backend/coverage.xml
            backend/.pytest_cache

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: backend/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend,pytest,windows
          name: backend-coverage-windows
          fail_ci_if_error: false
          verbose: true

      - name: Fail if tests failed
        if: failure()
        shell: pwsh
        run: Write-Error "One or more tests failed. See artifacts or logs for details."
